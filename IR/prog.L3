define @encode (%i) {
 
:NNNNNN
 br :entry
 
:entry
 %i <- %i << 1
 %i <- %i + 1
 return %i
}

define @decode (%i) {
 
:NNNNNN
 br :entry
 
:entry
 %i <- %i >> 1
 return %i
}

define @main () {
 
:NNNNNNNNNNN
 br :entry
 
:ret
 call print (%arr)
 return 
 
:outer_loop
 %t <- %t + 2
 %flag <- %t < %n
 %i <- 1
 %j <- 1
 %len <- %len - 2
 br %flag :inner_loop 
 br :ret
 
:inner_loop
 %ii <- call @decode (%i)
 %jj <- %ii + 1
 %newVar1 <- 0
 %newVar2 <- 1
 %newVar1 <- %newVar1 + %ii
 %newVar0 <- %newVar1 * 8
 %newVar0 <- %newVar0 + 16
 %newVar3 <- %arr + %newVar0
 %v1 <- load %newVar3
 %newVar5 <- 0
 %newVar6 <- 1
 %newVar5 <- %newVar5 + %jj
 %newVar4 <- %newVar5 * 8
 %newVar4 <- %newVar4 + 16
 %newVar7 <- %arr + %newVar4
 %v2 <- load %newVar7
 %flag <- %v1 > %v2
 br %flag :swap 
 br :aft_swap
 
:aft_swap
 %i <- %i + 2
 %flag <- %i < %len
 br %flag :inner_loop 
 br :outer_loop
 
:swap
 %newVar9 <- 0
 %newVar10 <- 1
 %newVar9 <- %newVar9 + %jj
 %newVar8 <- %newVar9 * 8
 %newVar8 <- %newVar8 + 16
 %newVar11 <- %arr + %newVar8
 store %newVar11 <- %v1
 %newVar13 <- 0
 %newVar14 <- 1
 %newVar13 <- %newVar13 + %ii
 %newVar12 <- %newVar13 * 8
 %newVar12 <- %newVar12 + 16
 %newVar15 <- %arr + %newVar12
 store %newVar15 <- %v2
 br :aft_swap
 
:init_label
 %x <- call input ()
 %ii <- call @decode (%k)
 %newVar17 <- 0
 %newVar18 <- 1
 %newVar17 <- %newVar17 + %ii
 %newVar16 <- %newVar17 * 8
 %newVar16 <- %newVar16 + 16
 %newVar19 <- %arr + %newVar16
 store %newVar19 <- %x
 %k <- %k + 2
 %flag <- %k < %n
 br %flag :init_label 
 br :inner_loop
 
:entry
 %n <- call input ()
 %len <- %n - 2
 %newVar21 <- %n >> 1
 %newVar20 <- %newVar21
 %newVar20 <- %newVar20 << 1
 %newVar20 <- %newVar20 + 1
 %newVar20 <- %newVar20 + 2
 %arr <- call allocate (%newVar20, 1)
 %newVar22 <- %arr + 8
 store %newVar22 <- %n
 %i <- 1
 %j <- 1
 %k <- 1
 %t <- 1
 br :init_label
}

